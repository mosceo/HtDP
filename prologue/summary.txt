;========================================================================
; Preface & Prologue. Main points.
;========================================================================

-) систематическое проектирование программ

-) The key is to discover which functions are needed, how to connect them, and how to build them from basic ingredients.

-) в предисловии есть 6 этапов рецепта проектирования функции

-) This book deals with just two recipes for complete programs: one for programs with graphical user interface (GUI) and one for batch programs. In contrast, design recipes for functions come in a wide variety of flavors: for atomic forms of data such as numbers; for enumerations of different kinds of data; for data that compounds other data in a fixed manner; for finite but arbitrarily large data; and so on.

-) Getting everything right at once is nearly impossible. Instead, computer scientists borrow iterative refinement from the physical sciences to tackle this design problem. In essence, iterative refinement recommends stripping away all inessential details at first and finding a solution for the remaining core problem. A refinement step adds in one of these omitted details and re-solves the expanded problem, using the existing solution as much as possible.

-) Программирование это не знание языка. Быть хорошим программистов это как быть хорошим эссеистом. Знание языка не достаточно.

-) Принципы правильного дизайна приложимы к любому языку. И не только к программированию, но и к другим вмдам деятельности.

-) MVC

-) top-down planning phase followed by a bottom-up construction phase

-) In the ideal program, a small request, such as changing the sizes of the canvas, should require an equally small change.

-) In modern parlance, you have just experienced your first program refactoring. Every time you re-organize your program to prepare yourself for likely future change requests, you refactor your program.

*) Do you see repeated expressions in the code? Do you see similar blocks of logic? Eliminate them all by creating new fnctions and constant definitions.

*) Do you see a number in an expression? After some time you may have no idea what it stands for. These numbers are called magic numbers. Get rid of them by creating constant definitions. (* 20 t) becomes (* SPEED t).


