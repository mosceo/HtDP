*) purpose of a template is to express the data definition as a function layout
   перенести определение данных в шаблон (набросок) функции
   
*) (find combinator) arrange the examples from the third step in a table. Place the given input in the first column and the desired output in the last column. In the intermediate columns enter the values of the selector expressions and the natural recursion(s). Add examples until you see a pattern emerge that suggests a combinator.

*) we suggest to create and to refer to a separate function template whenever you are developing a template for a data definition that refers to other data definitions

*) iterative refinement is a crucial design principle. Often it is impossible to design an application without it.

*) the usual list template:

 (define (rev l)
  (cond
    [(empty? l) ...]
    [else (... (first l) ...
           ... (rev (rest l)) ...)]))

*) How to Design Programs explains that programs are collections of definitions: structure type definitions, data definitions, constant definitions, and function definitions. And don’t forget tests. Design one function per task. Formulate auxiliary function definitions for every dependency between quantities in the problem. 

*) Design one template per data definition. Formulate auxiliary function definitions when one data definition points to a second data definition.

*) Sometimes you should solve a more general problem. You may need to design a more general function and define the main function as a specific use of the general function. This suggestion sounds counter-intuitive but it is called for in a remarkably large number of cases.

*) The key insight for you is, however, that just because a function has to deal with more inputs than another function does not mean that the former is more complex than the latter; generalizations often simplify function definitions.

*) 
